datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                 String    @id @default(cuid())
  userId             String
  providerType       String
  providerId         String
  providerAccountId  String
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id])

  @@unique([providerId, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
}

model User {
  id                  String               @id @default(cuid())
  name                String?
  email               String               @unique
  password            String 
  emailVerified       DateTime?
  image               String?
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  accounts            Account[]
  sessions            Session[]
  passwordResetTokens PasswordResetToken[]

  role                Role                @default(USER)
  created_work_areas  WorkArea[]          @relation("CreatedWorkAreas")
  assigned_work_areas WorkArea[]          @relation("AssignedWorkAreas")
  changedWorkAreas    WorkAreaChangeLog[] @relation("ChangedWorkAreas")
}

enum Role {
  ADMIN
  USER
  PUBLISHER
}

model PasswordResetToken {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  expiresAt DateTime

  @@index([userId])
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

// TODO: add more types
enum WorkAreaType {
  forestwork
  nature
}

enum WorkAreaRestrictionLevel {
  none
  attention
  danger
}

model WorkArea {
  id               Int                      @id @default(autoincrement())
  name             String
  area             Json
  type             WorkAreaType
  restrictionLevel WorkAreaRestrictionLevel
  startTime        DateTime                 @default(now())
  endTime          DateTime
  description      String?
  rerouting        String?
  createdAt        DateTime                 @default(now())
  autoEnd          Boolean                  @default(false)

  createdBy   User                @relation("CreatedWorkAreas", fields: [createdById], references: [id])
  createdById String
  workers     User[]              @relation("AssignedWorkAreas")
  changeLogs  WorkAreaChangeLog[]
}

enum ChangeType {
  CREATED
  UPDATED
  DELETED
}

model WorkAreaChangeLog {
  id              Int        @id @default(autoincrement())
  workAreaId      Int
  workArea        WorkArea   @relation(fields: [workAreaId], references: [id])
  changedById     String
  changedBy       User       @relation("ChangedWorkAreas", fields: [changedById], references: [id])
  changeType      ChangeType
  previousValues Json
  newValues      Json
  createdAt      DateTime   @default(now())
}

model PdfTemplate {
  id        Int      @id @default(autoincrement())
  name      String
  description String
  basePdf String
  schemas Json[]
  neededFields String[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}